4/2/2021
Beatrix Haddock

PURPOSE -------------------------------------------------------
This dir is full of a bunch of models that I tested while trying to develop models to estimate
- A = percent of the population eating vehicle
- B = percent of the population eating industrially produced vehicle
- C = percent of the population eating fortified vehicle


CONTENTS ------------------------------------------------------
There are a handful of notebooks that tested different models (from 03/04 and 03/05):
- MICE
- linear regression
- elastic net
- random forest
- gradient boosted

There is one notebook that tests running a ratio, as an attempt to bound eats fortifiable from below by eats vehicle:
- 2021_03_07_eats_fortifiable_over_eats_vehicle_regression.ipynb

All notebooks from 03/14 on run gradient boosted regressions on one variable (no ratios). Final results came from:
- 2021_03_14_pct_pop_eating_vehicle_gradient_boosted.ipynb
- 2021_03_15_pct_pop_eating_fortifiable_gradient_boosted_general.ipynb
- 2021_03_31_fortified_gb.ipynb

There is one notebook for putting together an input sheet
- pull_covs_3_14.ipynb

A few helper functions for data formatting are in
- fill_data_gap_helpers.py


GRADIENT BOOSTED MODEL NOTES -----------------------------------

The simplest gradient boosted regression can be found in:
- 2021_03_14_pct_pop_eating_vehicle_gradient_boosted.ipynb

Overview:
- replaces any categorical variables with random numbers (would like to replace with dummy vars)
- subsets to all input data where we have data on B or C if estimating A (A or C if estimating B, A or B if estiamting C)
    - found via testing that the model performed better when i DIDNT allow it to train on rows of data where i had imputed these vals
- for each var in my predictors, replace any NaNs with the vehicle-stratified mean value of that var.
- run regression

Most of model construction is in the function setupReg(). Parameter selection is in runReg(). Predictions are generated by estimate_nans(), and draws/iterations are done by estimate_w_uncertainty().

As of 04/02/2021, notebook contains some extraneous import statements due to evolving from previous
notbooks.

The model was constructed after reading this documentation:
https://scikit-learn.org/stable/auto_examples/ensemble/plot_gradient_boosting_regression.html

Parameters were selected via testing. In general, increasing n_estimators increases estimate
quality and runtime.
    - Noting that using 'lad' as my loss function resulted in significant improvements.

Note that estimate_w_uncertainty(vehicle, n) simply runs the model n times with the same input data,
so the 'uncertainty' comes from random variation in how the model is built; *not* different input data.

